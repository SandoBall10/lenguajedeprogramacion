"""
Autor: Sistema de Matr√≠culas Universitarias
M√≥dulo: Punto de Entrada Principal
Descripci√≥n: Archivo principal para ejecutar la aplicaci√≥n
Paradigma: Multiparadigma (POO, Funcional, L√≥gico)
"""

import sys
import os
import logging
from typing import Optional

def setup_logging():
    """
    Configura el sistema de logging para la aplicaci√≥n
    Manejo de errores y registro de eventos
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('sistema_matriculas.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def check_dependencies() -> bool:
    """
    Verifica que todas las dependencias est√©n instaladas
    Validaci√≥n de entrada y manejo de errores
    """
    required_modules = [
        'mysql.connector',
        'pandas',
        'numpy',
        'matplotlib',
        'tkinter'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print("‚úó Faltan las siguientes dependencias:")
        for module in missing_modules:
            print(f"  - {module}")
        print("\nInstale las dependencias con:")
        print("pip install mysql-connector-python pandas numpy matplotlib")
        print("tkinter viene incluido con Python")
        return False
    
    print("‚úì Todas las dependencias est√°n instaladas")
    return True

def show_startup_banner():
    """
    Muestra el banner de inicio de la aplicaci√≥n
    Uso de cadenas de texto y formateo
    """
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    SISTEMA DE MATR√çCULAS UNIVERSITARIAS                      ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üéì Proyecto Acad√©mico - Teor√≠a de los Lenguajes de Programaci√≥n            ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üìã Caracter√≠sticas:                                                         ‚ïë
‚ïë     ‚Ä¢ Paradigmas: Orientado a Objetos, Funcional, L√≥gico                   ‚ïë
‚ïë     ‚Ä¢ Lenguaje: Python 3.x                                                  ‚ïë
‚ïë     ‚Ä¢ Base de Datos: MySQL (XAMPP)                                          ‚ïë
‚ïë     ‚Ä¢ Interfaz: Consola + GUI (tkinter)                                     ‚ïë
‚ïë     ‚Ä¢ Ciencia de Datos: pandas, numpy, matplotlib                           ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üîß Funcionalidades:                                                         ‚ïë
‚ïë     ‚Ä¢ Gesti√≥n completa de estudiantes, cursos y matr√≠culas                  ‚ïë
‚ïë     ‚Ä¢ Reportes y estad√≠sticas avanzadas                                     ‚ïë
‚ïë     ‚Ä¢ An√°lisis de datos y visualizaciones                                   ‚ïë
‚ïë     ‚Ä¢ Exportaci√≥n a CSV y Excel                                             ‚ïë
‚ïë     ‚Ä¢ Comparaci√≥n de lenguajes de programaci√≥n                              ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üë®‚Äçüíª Autor: Sistema de Matr√≠culas Universitarias                             ‚ïë
‚ïë  üìÖ A√±o: 2024                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def get_execution_mode() -> str:
    """
    Permite al usuario seleccionar el modo de ejecuci√≥n
    Uso de instrucciones condicionales y entrada de datos
    """
    print("\nüöÄ MODOS DE EJECUCI√ìN DISPONIBLES:")
    print("1. Aplicaci√≥n de Consola (Interfaz de texto)")
    print("2. Interfaz Gr√°fica (GUI con tkinter)")
    print("3. Modo Mixto (Consola + opci√≥n de GUI)")
    
    while True:
        try:
            choice = input("\nSeleccione el modo de ejecuci√≥n (1-3): ").strip()
            
            if choice in ['1', '2', '3']:
                return choice
            else:
                print("‚ùå Opci√≥n inv√°lida. Seleccione 1, 2 o 3.")
                
        except KeyboardInterrupt:
            print("\n\nüëã Saliendo del programa...")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")

def run_console_mode():
    """
    Ejecuta la aplicaci√≥n en modo consola
    Importaci√≥n din√°mica y manejo de m√≥dulos
    """
    try:
        print("\nüñ•Ô∏è  Iniciando aplicaci√≥n de consola...")
        
        from console_app import ConsoleApp
        
        app = ConsoleApp()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulo de consola: {str(e)}")
    except Exception as e:
        print(f"‚ùå Error ejecutando aplicaci√≥n de consola: {str(e)}")

def run_gui_mode():
    """
    Ejecuta la aplicaci√≥n en modo GUI
    Manejo de interfaz gr√°fica con tkinter
    """
    try:
        print("\nüñºÔ∏è  Iniciando interfaz gr√°fica...")
        
        # Verificar que tkinter est√© disponible
        import tkinter as tk
        
        # Verificar que la base de datos est√© configurada
        from config.database import DatabaseConfig
        
        db_config = DatabaseConfig()
        if not db_config.create_database_and_tables():
            print("‚ùå Error configurando base de datos")
            return
        
        from gui.main_window import MainWindow
        
        app = MainWindow()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Error importando m√≥dulos GUI: {str(e)}")
        print("Aseg√∫rese de que tkinter est√© instalado")
    except Exception as e:
        print(f"‚ùå Error ejecutando interfaz gr√°fica: {str(e)}")

def run_mixed_mode():
    """
    Ejecuta la aplicaci√≥n en modo mixto
    Combinaci√≥n de consola y GUI seg√∫n elecci√≥n del usuario
    """
    try:
        print("\nüîÑ Modo mixto seleccionado")
        print("Iniciando con aplicaci√≥n de consola...")
        print("Desde la consola podr√° acceder a la interfaz gr√°fica cuando lo desee")
        
        from console_app import ConsoleApp
        
        app = ConsoleApp()
        app.run()
        
    except Exception as e:
        print(f"‚ùå Error ejecutando modo mixto: {str(e)}")

def main():
    """
    Funci√≥n principal del programa
    Punto de entrada y control de flujo principal
    """
    try:
        # Configurar logging
        setup_logging()
        logger = logging.getLogger(__name__)
        logger.info("Iniciando Sistema de Matr√≠culas Universitarias")
        
        # Mostrar banner de inicio
        show_startup_banner()
        
        # Verificar dependencias
        if not check_dependencies():
            print("\n‚ùå No se pueden ejecutar todas las funcionalidades sin las dependencias")
            print("¬øDesea continuar de todos modos? (s/n): ", end="")
            
            if input().lower() not in ['s', 'si', 'y', 'yes']:
                print("üëã Saliendo del programa...")
                return
        
        # Seleccionar modo de ejecuci√≥n
        mode = get_execution_mode()
        
        # Ejecutar seg√∫n el modo seleccionado
        mode_functions = {
            '1': run_console_mode,
            '2': run_gui_mode,
            '3': run_mixed_mode
        }
        
        # Programaci√≥n funcional: usar diccionario como dispatcher
        mode_function = mode_functions.get(mode)
        if mode_function:
            mode_function()
        else:
            print("‚ùå Modo de ejecuci√≥n inv√°lido")
        
        print("\n‚úÖ Programa finalizado correctamente")
        logger.info("Sistema de Matr√≠culas finalizado correctamente")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Programa interrumpido por el usuario")
        logging.info("Programa interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {str(e)}")
        logging.error(f"Error cr√≠tico: {str(e)}", exc_info=True)
    finally:
        print("\nüëã ¬°Gracias por usar el Sistema de Matr√≠culas Universitarias!")

def show_help():
    """
    Muestra ayuda sobre el uso del programa
    Informaci√≥n para el usuario
    """
    help_text = """
üìñ AYUDA - SISTEMA DE MATR√çCULAS UNIVERSITARIAS

üéØ PROP√ìSITO:
   Sistema acad√©mico para gestionar estudiantes, cursos y matr√≠culas universitarias.
   Desarrollado como proyecto para el curso de Teor√≠a de los Lenguajes de Programaci√≥n.

üîß REQUISITOS T√âCNICOS:
   ‚Ä¢ Python 3.7 o superior
   ‚Ä¢ MySQL Server (XAMPP recomendado)
   ‚Ä¢ Librer√≠as: mysql-connector-python, pandas, numpy, matplotlib

üìã FUNCIONALIDADES PRINCIPALES:
   ‚Ä¢ Registro y gesti√≥n de estudiantes
   ‚Ä¢ Administraci√≥n de cursos acad√©micos
   ‚Ä¢ Sistema de matr√≠culas con validaciones
   ‚Ä¢ Reportes y estad√≠sticas detalladas
   ‚Ä¢ An√°lisis de datos con pandas/numpy
   ‚Ä¢ Interfaz de consola y gr√°fica (tkinter)
   ‚Ä¢ Exportaci√≥n a CSV y Excel

üé® PARADIGMAS IMPLEMENTADOS:
   ‚Ä¢ Orientado a Objetos: Clases, herencia, encapsulaci√≥n
   ‚Ä¢ Funcional: map(), filter(), lambda, funciones de orden superior
   ‚Ä¢ L√≥gico: Predicados, reglas de negocio, validaciones

üöÄ MODOS DE EJECUCI√ìN:
   1. Consola: Interfaz de texto completa
   2. GUI: Interfaz gr√°fica con tkinter
   3. Mixto: Consola con acceso a GUI

üìû SOPORTE:
   Para problemas t√©cnicos, verifique:
   ‚Ä¢ Conexi√≥n a MySQL (XAMPP ejecut√°ndose)
   ‚Ä¢ Instalaci√≥n de dependencias Python
   ‚Ä¢ Permisos de base de datos

üéì ASPECTOS ACAD√âMICOS:
   ‚Ä¢ Demuestra aplicaci√≥n de m√∫ltiples paradigmas
   ‚Ä¢ Implementa patrones de dise√±o (DAO, MVC)
   ‚Ä¢ Usa ciencia de datos para an√°lisis
   ‚Ä¢ Incluye comparaci√≥n de lenguajes de programaci√≥n
    """
    print(help_text)

# Funciones auxiliares para el programa principal
def validate_python_version() -> bool:
    """
    Valida que la versi√≥n de Python sea compatible
    Verificaci√≥n de requisitos del sistema
    """
    if sys.version_info < (3, 7):
        print(f"‚ùå Python 3.7+ requerido. Versi√≥n actual: {sys.version}")
        return False
    return True

def check_mysql_connection() -> bool:
    """
    Verifica la conexi√≥n a MySQL
    Predicado l√≥gico para validaci√≥n de base de datos
    """
    try:
        from config.database import DatabaseConfig
        
        db_config = DatabaseConfig()
        if db_config.connect():
            db_config.disconnect()
            return True
        return False
        
    except Exception:
        return False

# Decorador para manejo de errores (programaci√≥n funcional)
def handle_errors(func):
    """
    Decorador para manejo centralizado de errores
    Programaci√≥n funcional: decoradores como funciones de orden superior
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logging.error(f"Error en {func.__name__}: {str(e)}")
            print(f"‚ùå Error: {str(e)}")
            return None
    return wrapper

# Funci√≥n lambda para validaciones r√°pidas
is_valid_mode = lambda mode: mode in ['1', '2', '3']
is_affirmative = lambda response: response.lower() in ['s', 'si', 'y', 'yes']

if __name__ == "__main__":
    # Verificar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['--help', '-h', 'help']:
            show_help()
        elif arg in ['--console', '-c']:
            run_console_mode()
        elif arg in ['--gui', '-g']:
            run_gui_mode()
        elif arg in ['--version', '-v']:
            print("Sistema de Matr√≠culas Universitarias v1.0")
            print("Python", sys.version)
        else:
            print(f"‚ùå Argumento desconocido: {arg}")
            print("Use --help para ver opciones disponibles")
    else:
        # Ejecutar programa principal
        main()