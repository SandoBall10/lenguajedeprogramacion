"""
Autor: Sistema de Matr√≠culas Universitarias
M√≥dulo: Punto de Entrada Principal con Autenticaci√≥n
Descripci√≥n: Archivo principal con sistema de login y roles
Paradigma: Multiparadigma (POO, Funcional, L√≥gico)
"""

import sys
import os
import logging
from typing import Optional

def setup_logging():
    """Configura el sistema de logging para la aplicaci√≥n"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('sistema_matriculas.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def check_dependencies() -> bool:
    """Verifica que todas las dependencias est√©n instaladas"""
    required_modules = [
        'mysql.connector',
        'pandas',
        'numpy',
        'matplotlib',
        'tkinter'
    ]
    
    missing_modules = []
    
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print("‚ùå Faltan las siguientes dependencias:")
        for module in missing_modules:
            print(f"  - {module}")
        print("\nInstale las dependencias con:")
        print("pip install mysql-connector-python pandas numpy matplotlib")
        print("tkinter viene incluido con Python")
        return False
    
    print("‚úÖ Todas las dependencias est√°n instaladas")
    return True

def show_startup_banner():
    """Muestra el banner de inicio con colores"""
    # C√≥digos de colores ANSI
    CYAN = '\033[36m'
    YELLOW = '\033[33m'
    WHITE = '\033[37m'
    BOLD = '\033[1m'
    RESET = '\033[0m'
    
    banner = f"""
{CYAN}{BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{RESET}
{CYAN}{BOLD}‚ïë                    SISTEMA DE MATR√çCULAS UNIVERSITARIAS                      ‚ïë{RESET}
{CYAN}{BOLD}‚ïë                        üéì UTP - 2024 üéì                                       ‚ïë{RESET}
{CYAN}‚ïë                                                                              ‚ïë{RESET}
{WHITE}‚ïë  üìã Caracter√≠sticas:                                                         ‚ïë{RESET}
{WHITE}‚ïë     ‚Ä¢ Sistema de Login con Roles (Admin/Estudiante)                          ‚ïë{RESET}
{WHITE}‚ïë     ‚Ä¢ Paradigmas: Orientado a Objetos, Funcional, L√≥gico                     ‚ïë{RESET}
{WHITE}‚ïë     ‚Ä¢ Lenguaje: Python 3.x                                                   ‚ïë{RESET}
{WHITE}‚ïë     ‚Ä¢ Base de Datos: MySQL (XAMPP)                                           ‚ïë{RESET}
{WHITE}‚ïë     ‚Ä¢ Interfaz: Gr√°fica (tkinter)                                            ‚ïë{RESET}
{WHITE}‚ïë     ‚Ä¢ Ciencia de Datos: pandas, numpy, matplotlib                            ‚ïë{RESET}
{CYAN}‚ïë                                                                              ‚ïë{RESET}
{YELLOW}‚ïë  üîê Credenciales por defecto:                                               ‚ïë{RESET}
{YELLOW}‚ïë     ‚Ä¢ Admin: admin@sistema.com / admin123                                    ‚ïë{RESET}
{YELLOW}‚ïë     ‚Ä¢ Estudiantes: Crear desde panel admin                                   ‚ïë{RESET}
{CYAN}‚ïë                                                                              ‚ïë{RESET}
{CYAN}{BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{RESET}
    """
    print(banner)

def get_execution_mode() -> str:
    """Inicia directamente la interfaz gr√°fica"""
    GREEN = '\033[32m'
    CYAN = '\033[36m'
    RESET = '\033[0m'
    
    print(f"\n{GREEN}üöÄ INICIANDO INTERFAZ GR√ÅFICA:{RESET}")
    print(f"{CYAN}üñºÔ∏è  Cargando Sistema de Matr√≠culas - Modo Visual{RESET}")
    
    return '2'  # Siempre retorna GUI

def run_gui_with_auth():
    """Ejecuta la interfaz gr√°fica con autenticaci√≥n"""
    try:
        GREEN = '\033[32m'
        CYAN = '\033[36m'
        RED = '\033[31m'
        RESET = '\033[0m'
        
        print(f"\n{CYAN}üñºÔ∏è  Iniciando interfaz gr√°fica con autenticaci√≥n...{RESET}")
        
        # Verificar que tkinter est√© disponible
        import tkinter as tk
        
        # Verificar que la base de datos est√© configurada
        from config.database import DatabaseConfig
        
        db_config = DatabaseConfig()
        if not db_config.create_database_and_tables():
            print(f"{RED}‚ùå Error configurando base de datos{RESET}")
            return
        
        # Crear tabla de usuarios
        try:
            connection = db_config.get_new_connection()
            if connection is None:
                print(f"{RED}‚ùå No se pudo establecer conexi√≥n con la base de datos{RESET}")
                return
                
            cursor = connection.cursor()
            
            create_users_table = '''
            CREATE TABLE IF NOT EXISTS usuarios (
                id INT AUTO_INCREMENT PRIMARY KEY,
                email VARCHAR(100) UNIQUE NOT NULL,
                password_hash VARCHAR(64) NOT NULL,
                rol ENUM("ADMINISTRADOR", "ESTUDIANTE") NOT NULL,
                nombre VARCHAR(100),
                apellido VARCHAR(100),
                codigo_estudiante VARCHAR(10),
                activo BOOLEAN DEFAULT TRUE,
                fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            '''
            
            cursor.execute(create_users_table)
            connection.commit()
            cursor.close()
            connection.close()
            
        except Exception as e:
            print(f"{RED}‚ùå Error creando tabla usuarios: {str(e)}{RESET}")
        
        from gui.main_window_with_auth import MainWindowWithAuth
        
        app = MainWindowWithAuth()
        app.run()
        
    except ImportError as e:
        print(f"{RED}‚ùå Error importando m√≥dulos GUI: {str(e)}{RESET}")
        print("Aseg√∫rese de que tkinter est√© instalado")
    except Exception as e:
        print(f"{RED}‚ùå Error ejecutando interfaz gr√°fica: {str(e)}{RESET}")

def main():
    """Funci√≥n principal del programa"""
    try:
        # Configurar logging
        setup_logging()
        logger = logging.getLogger(__name__)
        logger.info("Iniciando Sistema de Matr√≠culas Universitarias con Autenticaci√≥n")
        
        # Mostrar banner de inicio
        show_startup_banner()
        
        # Verificar dependencias
        if not check_dependencies():
            YELLOW = '\033[33m'
            RED = '\033[31m'
            RESET = '\033[0m'
            
            print(f"\n{RED}‚ùå No se pueden ejecutar todas las funcionalidades sin las dependencias{RESET}")
            print(f"{YELLOW}¬øDesea continuar de todos modos? (s/n): {RESET}", end="")
            
            if input().lower() not in ['s', 'si', 'y', 'yes']:
                print(f"{YELLOW}üëã Saliendo del programa...{RESET}")
                return
        
        # Seleccionar modo de ejecuci√≥n (siempre GUI)
        mode = get_execution_mode()
        
        # Ejecutar interfaz gr√°fica
        run_gui_with_auth()
        
        GREEN = '\033[32m'
        RESET = '\033[0m'
        print(f"\n{GREEN}‚úÖ Programa finalizado correctamente{RESET}")
        logger.info("Sistema de Matr√≠culas finalizado correctamente")
        
    except KeyboardInterrupt:
        YELLOW = '\033[33m'
        RESET = '\033[0m'
        print(f"\n\n{YELLOW}‚ö†Ô∏è  Programa interrumpido por el usuario{RESET}")
        logging.info("Programa interrumpido por el usuario")
    except Exception as e:
        RED = '\033[31m'
        RESET = '\033[0m'
        print(f"\n{RED}‚ùå Error cr√≠tico: {str(e)}{RESET}")
        logging.error(f"Error cr√≠tico: {str(e)}", exc_info=True)
    finally:
        CYAN = '\033[36m'
        YELLOW = '\033[33m'
        RESET = '\033[0m'
        print(f"\n{CYAN}üëã ¬°Gracias por usar el Sistema de Matr√≠culas Universitarias!{RESET}")
        print(f"{YELLOW}üéì Universidad Tecnol√≥gica del Per√∫ - UTP{RESET}")

if __name__ == "__main__":
    # Verificar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['--help', '-h', 'help']:
            print("Sistema de Matr√≠culas Universitarias con Autenticaci√≥n")
            print("Uso: python main_with_auth.py [opci√≥n]")
            print("Opciones:")
            print("  --gui, -g        Ejecutar en modo GUI (por defecto)")
            print("  --version, -v    Mostrar versi√≥n")
            print("  --help, -h       Mostrar esta ayuda")
        elif arg in ['--gui', '-g']:
            run_gui_with_auth()
        elif arg in ['--version', '-v']:
            print("Sistema de Matr√≠culas Universitarias v2.0 - Interfaz Gr√°fica")
            print("Python", sys.version)
        else:
            RED = '\033[31m'
            RESET = '\033[0m'
            print(f"{RED}‚ùå Argumento desconocido: {arg}{RESET}")
            print("Use --help para ver opciones disponibles")
    else:
        # Ejecutar programa principal
        main()